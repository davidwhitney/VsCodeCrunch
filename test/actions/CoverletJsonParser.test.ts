import { readCoverageFile, readCoverage, LineCoverage } from "../../src/actions/CoverletJsonParser";

describe("CoverletJsonParser", () => {

    it("readCoverage, valid coverage file, sorts metrics by filename", () => {

        const result = readCoverage(fullCoverageExample);

        expect(result.has("c:\\dev\\dojo4\\dojo4\\UnitTest1.cs")).toBe(true);
        expect(result.size).toBe(2);
    });

    it("readCoverage, valid coverage file, returns coverage lines in correct format", () => {
        const coverageFileContents = {
            "dojo4.dll": {
                "File.cs": {
                    "AutoGeneratedProgram": {
                        "System.Void AutoGeneratedProgram::Main(System.String[])": {
                            "Lines": {
                                "4": 5
                            },
                            "Branches": []
                        }
                    }
                }
            }
        };

        const result = readCoverage(coverageFileContents);
        const metric = <LineCoverage[]>result.get("File.cs");

        expect(metric[0].lineNo).toBe(4);
        expect(metric[0].lineIndex).toBe(3);
        expect(metric[0].hits).toBe(5);
    });
});


const fullCoverageExample = {
    "dojo4.dll": {
        "C:\\Users\\Microsoft.NET.Test.Sdk.Program.cs": {
            "AutoGeneratedProgram": {
                "System.Void AutoGeneratedProgram::Main(System.String[])": {
                    "Lines": {
                        "4": 5
                    },
                    "Branches": []
                }
            }
        },
        "c:\\dev\\dojo4\\dojo4\\UnitTest1.cs": {
            "dojo4.Tests": {
                "System.Void dojo4.Tests::MakeDiamond_GivenA_OnlyOneLineOfOutput()": {
                    "Lines": {
                        "12": 1,
                        "13": 1,
                        "14": 1,
                        "15": 1,
                        "16": 1,
                        "17": 1,
                        "20": 1,
                        "21": 1,
                        "22": 1
                    },
                    "Branches": []
                },
                "System.Void dojo4.Tests::MakeDiamond_GivenA_FirstAndLastLineOfResultIsAlwaysA()": {
                    "Lines": {
                        "26": 1,
                        "27": 1,
                        "28": 1,
                        "29": 1,
                        "30": 1
                    },
                    "Branches": []
                },
                "System.Void dojo4.Tests::MakeDiamond_GivenAnythingNotA_AlwaysStartsAndEndsWithA()": {
                    "Lines": {
                        "34": 1,
                        "35": 1,
                        "36": 1,
                        "37": 1,
                        "38": 1
                    },
                    "Branches": []
                },
                "System.Void dojo4.Tests::MakeDiamond_GivenAnythingNotA_ALinesOnlyHaveSingleA()": {
                    "Lines": {
                        "42": 1,
                        "43": 1,
                        "45": 4,
                        "46": 4,
                        "48": 1,
                        "49": 1,
                        "50": 1
                    },
                    "Branches": []
                },
                "System.Void dojo4.Tests::MakeDiamond_GivenAnythingNotA_OutputAlwaysContainsTargetCharacter()": {
                    "Lines": {
                        "54": 1,
                        "55": 1,
                        "56": 1,
                        "57": 1,
                        "58": 1
                    },
                    "Branches": []
                },
                "System.Void dojo4.Tests::MakeDiamond_GivenAnythingNotA_MiddleLineAlwaysContainsTargetLetter()": {
                    "Lines": {
                        "63": 10,
                        "64": 10,
                        "65": 10,
                        "67": 10,
                        "68": 10,
                        "69": 10
                    },
                    "Branches": []
                },
                "System.Void dojo4.Tests::MakeDiamond_GivenAnythingNotA_NumberOfRowsAlwaysTwiceLengthPlusOneOfLetterSupplied()": {
                    "Lines": {
                        "73": 1,
                        "74": 1,
                        "75": 1,
                        "77": 1,
                        "79": 1,
                        "80": 1
                    },
                    "Branches": []
                },
                "System.Void dojo4.Tests::MakeDiamond_GivenAnythingNotA_LineContainsTwoInstancesOfLetter()": {
                    "Lines": {
                        "84": 1,
                        "85": 1,
                        "87": 1,
                        "89": 1,
                        "90": 38,
                        "91": 1,
                        "92": 1
                    },
                    "Branches": []
                },
                "System.Void dojo4.Tests::MakeDiamond_GivenAnythingNotA_LineIsSpacedCorrectly()": {
                    "Lines": {
                        "96": 1,
                        "97": 1,
                        "99": 1,
                        "100": 1
                    },
                    "Branches": []
                },
                "System.Void dojo4.Tests::MakeDiamond_GivenAnythingNotA_TopLineCorrectlyPadded()": {
                    "Lines": {
                        "104": 1,
                        "105": 1,
                        "107": 1,
                        "108": 1
                    },
                    "Branches": []
                },
                "System.Void dojo4.Tests::DemoTest()": {
                    "Lines": {
                        "112": 1,
                        "113": 1,
                        "114": 1,
                        "115": 1
                    },
                    "Branches": []
                },
                "System.Char dojo4.Tests::RandomLetter()": {
                    "Lines": {
                        "118": 14,
                        "119": 14,
                        "120": 14,
                        "121": 14
                    },
                    "Branches": []
                }
            },
            "dojo4.DiamondMaker": {
                "System.Collections.Generic.List`1<System.String> dojo4.DiamondMaker::Create(System.Char)": {
                    "Lines": {
                        "127": 20,
                        "128": 20,
                        "130": 462,
                        "131": 211,
                        "132": 211,
                        "133": 211,
                        "134": 211,
                        "136": 211,
                        "137": 211,
                        "139": 20,
                        "141": 462,
                        "142": 211,
                        "143": 211,
                        "144": 211,
                        "145": 211,
                        "146": 211,
                        "148": 20,
                        "149": 20,
                        "150": 20,
                        "151": 20
                    },
                    "Branches": [
                        {
                            "Line": 130,
                            "Offset": 109,
                            "EndOffset": 12,
                            "Path": 1,
                            "Ordinal": 5,
                            "Hits": 211
                        },
                        {
                            "Line": 132,
                            "Offset": 16,
                            "EndOffset": 18,
                            "Path": 0,
                            "Ordinal": 0,
                            "Hits": 191
                        },
                        {
                            "Line": 132,
                            "Offset": 16,
                            "EndOffset": 31,
                            "Path": 1,
                            "Ordinal": 1,
                            "Hits": 20
                        },
                        {
                            "Line": 134,
                            "Offset": 48,
                            "EndOffset": 50,
                            "Path": 0,
                            "Ordinal": 2,
                            "Hits": 191
                        },
                        {
                            "Line": 134,
                            "Offset": 48,
                            "EndOffset": 76,
                            "Path": 1,
                            "Ordinal": 3,
                            "Hits": 20
                        },
                        {
                            "Line": 130,
                            "Offset": 109,
                            "EndOffset": 111,
                            "Path": 0,
                            "Ordinal": 4,
                            "Hits": 20
                        },
                        {
                            "Line": 141,
                            "Offset": 197,
                            "EndOffset": 128,
                            "Path": 1,
                            "Ordinal": 7,
                            "Hits": 211
                        },
                        {
                            "Line": 141,
                            "Offset": 197,
                            "EndOffset": 199,
                            "Path": 0,
                            "Ordinal": 6,
                            "Hits": 20
                        }
                    ]
                },
                "System.Int32 dojo4.DiamondMaker::GetPaddingLength(System.Int32,System.String)": {
                    "Lines": {
                        "154": 211,
                        "155": 211,
                        "156": 211
                    },
                    "Branches": []
                },
                "System.String dojo4.DiamondMaker::CreateAsString(System.Char)": {
                    "Lines": {
                        "159": 2
                    },
                    "Branches": []
                }
            }
        }
    }
};
